{"version":3,"sources":["components/Display.jsx","components/Numpad.jsx","components/Calculator.jsx","serviceWorker.js","index.js","App.js"],"names":["Display","styled","div","_templateObject","components_Display","_ref","display","react_default","a","createElement","Numpad","Numpad_templateObject","Button","button","_templateObject2","props","wide","OperationButton","_templateObject3","DarkButton","_templateObject4","components_Numpad","onNumber","onOperator","onEqual","onClear","onClick","Calculator","Calculator_templateObject","components_Calculator","_useState","useState","_useState2","Object","slicedToArray","equation","setEquation","_useState3","_useState4","setDisplay","_useState5","_useState6","setTotal","useEffect","console","log","val","eq","concat","toConsumableArray","join","operatorsChars","numbers","split","operators","match","total","parseInt","n","length","push","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d8485b2.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Display = styled.div`\n  width: calc(200px - 20px);\n  height: calc(75px - 20px);\n  background-color: rgba(90, 90, 90, 0.75);\n  color: #f4f4f4;\n  font-size: 30px;\n  text-align: right;\n  padding: 10px;\n  padding-top: 20px;\n  padding-bottom: 0px;\n`;\n\nexport default ({ display }) => <Display>{display}</Display>;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Numpad = styled.div`\n  width: 200px;\n`;\n\nconst Button = styled.button`\n  outline: none;\n  width: ${props => (props.wide ? \"100px\" : \"50px\")};\n  height: 50px;\n  border: 1px solid #6e6d6e;\n  background-color: rgba(130, 130, 130, 0.9);\n  color: #ebeceb;\n  font-size: 20px;\n`;\n\nconst OperationButton = styled(Button)`\n  background-color: rgba(255, 159, 11, 0.9);\n`;\n\nconst DarkButton = styled(Button)`\n  background-color: rgba(106, 106, 106, 0.9);\n`;\n\nexport default ({ onNumber, onOperator, onEqual, onClear }) => (\n  <Numpad>\n    <DarkButton onClick={onClear}>C</DarkButton>\n    <DarkButton>+/-</DarkButton>\n    <DarkButton>%</DarkButton>\n    <OperationButton onClick={() => onOperator(\"/\")}>&divide;</OperationButton>\n    <Button onClick={() => onNumber(7)}>7</Button>\n    <Button onClick={() => onNumber(8)}>8</Button>\n    <Button onClick={() => onNumber(9)}>9</Button>\n    <OperationButton onClick={() => onOperator(\"*\")}>x</OperationButton>\n    <Button onClick={() => onNumber(4)}>4</Button>\n    <Button onClick={() => onNumber(5)}>5</Button>\n    <Button onClick={() => onNumber(6)}>6</Button>\n    <OperationButton onClick={() => onOperator(\"-\")}>-</OperationButton>\n    <Button onClick={() => onNumber(1)}>1</Button>\n    <Button onClick={() => onNumber(2)}>2</Button>\n    <Button onClick={() => onNumber(3)}>3</Button>\n    <OperationButton onClick={() => onOperator(\"+\")}>+</OperationButton>\n    <Button onClick={() => onNumber(0)} wide>\n      0\n    </Button>\n    <Button>.</Button>\n    <OperationButton onClick={onEqual}>=</OperationButton>\n  </Numpad>\n);\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Display from \"./Display\";\nimport Numpad from \"./Numpad\";\n\nconst Calculator = styled.div`\n  position: absolute;\n  top: 30px;\n  left: 30px;\n  width: 200px;\n  -webkit-box-shadow: 2px 2px 8px 0px rgba(0, 0, 0, 0.5);\n  -moz-box-shadow: 2px 2px 8px 0px rgba(0, 0, 0, 0.5);\n  box-shadow: 2px 2px 8px 0px rgba(0, 0, 0, 0.5);\n`;\n\nexport default () => {\n  const [equation, setEquation] = useState([]);\n  const [display, setDisplay] = useState(\"\");\n  const [total, setTotal] = useState(0);\n\n  const onClear = () => {\n    setEquation([]);\n    setDisplay(\"\");\n    setTotal(0);\n  };\n\n  const onNumber = val => {\n    const eq = [...equation, val];\n    setEquation(eq);\n    setDisplay(eq.join(\" \"));\n    console.log(\"clicked num\", val, eq);\n  };\n\n  const onOperator = val => {\n    const eq = [...equation, val];\n    setEquation(eq);\n    setDisplay(eq.join(\" \"));\n    console.log(\"clicked op\", val, eq);\n  };\n\n  const onEqual = () => {\n    const operatorsChars = /[*/x+-]/gi;\n    const numbers = equation.join(\"\").split(operatorsChars);\n    console.log(numbers);\n    const operators = equation.join(\"\").match(operatorsChars);\n    console.log(operators);\n    let eq = [];\n    let total = parseInt(numbers[0]);\n\n    for (let n = 0; n < numbers.length; n++) {\n      if (n === 0) {\n        eq.push(numbers[n]);\n      }\n      if (typeof operators[n] !== \"undefined\") {\n        eq.push(operators[n]);\n        eq.push(numbers[n + 1]);\n        switch (operators[n]) {\n          case \"+\":\n            total = total + parseInt(numbers[n + 1]);\n            break;\n          case \"-\":\n            total = total - parseInt(numbers[n + 1]);\n            break;\n\n          case \"/\":\n            total = total / parseInt(numbers[n + 1]);\n            break;\n          case \"*\":\n            total = total * parseInt(numbers[n + 1]);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    console.log(eq);\n    console.log(total);\n    setDisplay(`${eq.join(\" \")} = ${total}`);\n    setTotal(total);\n  };\n\n  useEffect(() => {\n    console.log(\"display\", display);\n  });\n\n  return (\n    <Calculator>\n      <Display display={display} />\n      <Numpad\n        onNumber={onNumber}\n        onOperator={onOperator}\n        onEqual={onEqual}\n        onClear={onClear}\n      />\n    </Calculator>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport Calculator from \"./components/Calculator\";\n\nexport default () => <Calculator />;\n"],"sourceRoot":""}